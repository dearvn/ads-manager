{"remainingRequest":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/thread-loader/dist/cjs.js!/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/babel-loader/lib/index.js??ref--4-2!/Users/nguyenthanhdoan/www/wp/wpplugins/packages/utils/lib/factory/ajax/commonRequest.tsx","dependencies":[{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/packages/utils/lib/factory/ajax/commonRequest.tsx","mtime":1657739433190},{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/cache-loader/dist/cjs.js","mtime":1657732874511},{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/thread-loader/dist/cjs.js","mtime":1657732875400},{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/babel-loader/lib/index.js","mtime":1657732874459}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IHsgV1BfUkVTVF9BUElfVVNFX0dMT0JBTF9NRVRIT0QsIGNvbW1vblVybEJ1aWxkZXIsIFJvdXRlSHR0cFZlcmIgfSBmcm9tICIuLyI7CmltcG9ydCBkZWVwTWVyZ2UgZnJvbSAiZGVlcG1lcmdlIjsKaW1wb3J0IFVybCBmcm9tICJ1cmwtcGFyc2UiOwppbXBvcnQgIndoYXR3Zy1mZXRjaCI7IC8vIHdpbmRvdy5mZXRjaCBwb2x5ZmlsbAoKaW1wb3J0IHsgcGFyc2VSZXN1bHQgfSBmcm9tICIuIjsKLyoqCiAqIEJ1aWxkIGFuZCBleGVjdXRlIGEgc3BlY2lmaWMgUkVTVCBxdWVyeS4KICoKICogQHNlZSB1cmxCdWlsZGVyCiAqIEByZXR1cm5zIFJlc3VsdCBvZiBSRVNUIEFQSQogKiBAdGhyb3dzCiAqLwoKZnVuY3Rpb24gY29tbW9uUmVxdWVzdChfeCkgewogIHJldHVybiBfY29tbW9uUmVxdWVzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfY29tbW9uUmVxdWVzdCgpIHsKICBfY29tbW9uUmVxdWVzdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZikgewogICAgdmFyIGxvY2F0aW9uLCBvcHRpb25zLCByb3V0ZVJlcXVlc3QsIHBhcmFtcywgX3JlZiRzZXR0aW5ncywgc2V0dGluZ3MsIHVybCwgYXBpVXJsLCBhbGxvd0JvZHksIGFwaVVybEJ1aWx0LCByZXN1bHQsIHJlc3BvbnNlSlNPTiwgcmVzdWx0QW55OwoKICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbiwgb3B0aW9ucyA9IF9yZWYub3B0aW9ucywgcm91dGVSZXF1ZXN0ID0gX3JlZi5yZXF1ZXN0LCBwYXJhbXMgPSBfcmVmLnBhcmFtcywgX3JlZiRzZXR0aW5ncyA9IF9yZWYuc2V0dGluZ3MsIHNldHRpbmdzID0gX3JlZiRzZXR0aW5ncyA9PT0gdm9pZCAwID8ge30gOiBfcmVmJHNldHRpbmdzOwogICAgICAgICAgICB1cmwgPSBjb21tb25VcmxCdWlsZGVyKHsKICAgICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sCiAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsCiAgICAgICAgICAgICAgbm9uY2U6IGZhbHNlLAogICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMKICAgICAgICAgICAgfSk7IC8vIFVzZSBnbG9iYWwgcGFyYW1ldGVyIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIud29yZHByZXNzLm9yZy9yZXN0LWFwaS91c2luZy10aGUtcmVzdC1hcGkvZ2xvYmFsLXBhcmFtZXRlcnMvKQoKICAgICAgICAgICAgaWYgKFdQX1JFU1RfQVBJX1VTRV9HTE9CQUxfTUVUSE9EICYmIGxvY2F0aW9uLm1ldGhvZCAmJiBsb2NhdGlvbi5tZXRob2QgIT09IFJvdXRlSHR0cFZlcmIuR0VUKSB7CiAgICAgICAgICAgICAgc2V0dGluZ3MubWV0aG9kID0gUm91dGVIdHRwVmVyYi5QT1NUOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNldHRpbmdzLm1ldGhvZCA9IFJvdXRlSHR0cFZlcmIuR0VUOwogICAgICAgICAgICB9IC8vIFJlcXVlc3Qgd2l0aCBHRVQvSEVBRCBtZXRob2QgY2Fubm90IGhhdmUgYm9keQoKCiAgICAgICAgICAgIGFwaVVybCA9IG5ldyBVcmwodXJsLCB0cnVlKTsKICAgICAgICAgICAgYWxsb3dCb2R5ID0gWyJIRUFEIiwgIkdFVCJdLmluZGV4T2Yoc2V0dGluZ3MubWV0aG9kKSA9PT0gLTE7CgogICAgICAgICAgICBpZiAoIWFsbG93Qm9keSAmJiByb3V0ZVJlcXVlc3QpIHsKICAgICAgICAgICAgICBhcGlVcmwuc2V0KCJxdWVyeSIsIGRlZXBNZXJnZShhcGlVcmwucXVlcnksIHJvdXRlUmVxdWVzdCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBhcGlVcmxCdWlsdCA9IGFwaVVybC50b1N0cmluZygpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5mZXRjaChhcGlVcmxCdWlsdCwgZGVlcE1lcmdlLmFsbChbc2V0dGluZ3MsIHsKICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCIsCiAgICAgICAgICAgICAgICAiWC1XUC1Ob25jZSI6IG9wdGlvbnMucmVzdE5vbmNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBib2R5OiBhbGxvd0JvZHkgPyBKU09OLnN0cmluZ2lmeShyb3V0ZVJlcXVlc3QpIDogdW5kZWZpbmVkCiAgICAgICAgICAgIH1dKSk7CgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgaWYgKHJlc3VsdC5vaykgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmVzcG9uc2VKU09OID0gdW5kZWZpbmVkOwogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTI7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNTsKICAgICAgICAgICAgcmV0dXJuIHBhcnNlUmVzdWx0KGFwaVVybEJ1aWx0LCByZXN1bHQpOwoKICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgIHJlc3BvbnNlSlNPTiA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMDsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE4OwogICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDEyKTsKCiAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAvLyBTZXQgdGhpcyByZXF1ZXN0IGFzIGZhaWxpbmcgc28gdGhlIGVuZHBvaW50IGlzIHByb2JhYmx5IGNvcnJ1cHQgKHNlZSBgY29ycnVwUmVzdEFwaS50c3hgKQogICAgICAgICAgICBzZXR0aW5ncy5tZXRob2QgPT09IFJvdXRlSHR0cFZlcmIuR0VUICYmICh3aW5kb3cuZGV0ZWN0Q29ycnVwUmVzdEFwaUZhaWxlZCA9ICh3aW5kb3cuZGV0ZWN0Q29ycnVwUmVzdEFwaUZhaWxlZCB8fCAwKSArIDEpOwogICAgICAgICAgICByZXN1bHRBbnkgPSByZXN1bHQ7CiAgICAgICAgICAgIHJlc3VsdEFueS5yZXNwb25zZUpTT04gPSByZXNwb25zZUpTT047CiAgICAgICAgICAgIHRocm93IHJlc3VsdEFueTsKCiAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBwYXJzZVJlc3VsdChhcGlVcmxCdWlsdCwgcmVzdWx0KSk7CgogICAgICAgICAgY2FzZSAyNToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzEyLCAxOF1dKTsKICB9KSk7CiAgcmV0dXJuIF9jb21tb25SZXF1ZXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmV4cG9ydCB7IGNvbW1vblJlcXVlc3QgfTs="},{"version":3,"sources":["/Users/nguyenthanhdoan/www/wp/wpplugins/packages/utils/lib/factory/ajax/commonRequest.tsx"],"names":["WP_REST_API_USE_GLOBAL_METHOD","commonUrlBuilder","RouteHttpVerb","deepMerge","Url","parseResult","commonRequest","location","options","routeRequest","request","params","settings","url","nonce","method","GET","POST","apiUrl","allowBody","indexOf","set","query","apiUrlBuilt","toString","window","fetch","all","headers","restNonce","body","JSON","stringify","undefined","result","ok","responseJSON","detectCorrupRestApiFailed","resultAny"],"mappings":";;AAAA,SACIA,6BADJ,EAMIC,gBANJ,EAOIC,aAPJ,QAQO,IARP;AASA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAO,cAAP,C,CAAuB;;AACvB,SAASC,WAAT,QAA4B,GAA5B;AAEA;;;;;;;;SAOeC,a;;;;;4EAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKIC,YAAAA,QALJ,QAKIA,QALJ,EAMIC,OANJ,QAMIA,OANJ,EAOaC,YAPb,QAOIC,OAPJ,EAQIC,MARJ,QAQIA,MARJ,uBASIC,QATJ,EASIA,QATJ,8BASe,EATf;AAeUC,YAAAA,GAfV,GAegBZ,gBAAgB,CAAC;AAAEM,cAAAA,QAAQ,EAARA,QAAF;AAAYI,cAAAA,MAAM,EAANA,MAAZ;AAAoBG,cAAAA,KAAK,EAAE,KAA3B;AAAkCN,cAAAA,OAAO,EAAPA;AAAlC,aAAD,CAfhC,EAiBI;;AACA,gBAAIR,6BAA6B,IAAIO,QAAQ,CAACQ,MAA1C,IAAoDR,QAAQ,CAACQ,MAAT,KAAoBb,aAAa,CAACc,GAA1F,EAA+F;AAC3FJ,cAAAA,QAAQ,CAACG,MAAT,GAAkBb,aAAa,CAACe,IAAhC;AACH,aAFD,MAEO;AACHL,cAAAA,QAAQ,CAACG,MAAT,GAAkBb,aAAa,CAACc,GAAhC;AACH,aAtBL,CAwBI;;;AACME,YAAAA,MAzBV,GAyBmB,IAAId,GAAJ,CAAQS,GAAR,EAAa,IAAb,CAzBnB;AA0BUM,YAAAA,SA1BV,GA0BsB,CAAC,MAAD,EAAS,KAAT,EAAgBC,OAAhB,CAAwBR,QAAQ,CAACG,MAAjC,MAA6C,CAAC,CA1BpE;;AA2BI,gBAAI,CAACI,SAAD,IAAcV,YAAlB,EAAgC;AAC5BS,cAAAA,MAAM,CAACG,GAAP,CAAW,OAAX,EAAoBlB,SAAS,CAACe,MAAM,CAACI,KAAR,EAAeb,YAAf,CAA7B;AACH;;AAEKc,YAAAA,WA/BV,GA+BwBL,MAAM,CAACM,QAAP,EA/BxB;AAAA;AAAA,mBAgCyBC,MAAM,CAACC,KAAP,CACjBH,WADiB,EAEjBpB,SAAS,CAACwB,GAAV,CAAc,CACVf,QADU,EAEV;AACIgB,cAAAA,OAAO,EAAE;AACL,gCAAgB,gCADX;AAEL,8BAAcpB,OAAO,CAACqB;AAFjB,eADb;AAKIC,cAAAA,IAAI,EAAEX,SAAS,GAAGY,IAAI,CAACC,SAAL,CAAevB,YAAf,CAAH,GAAkCwB;AALrD,aAFU,CAAd,CAFiB,CAhCzB;;AAAA;AAgCUC,YAAAA,MAhCV;;AAAA,gBA+CSA,MAAM,CAACC,EA/ChB;AAAA;AAAA;AAAA;;AAgDYC,YAAAA,YAhDZ,GAgD2BH,SAhD3B;AAAA;AAAA;AAAA,mBAkDiC5B,WAAW,CAAYkB,WAAZ,EAAyBW,MAAzB,CAlD5C;;AAAA;AAkDYE,YAAAA,YAlDZ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAuDQ;AACAxB,YAAAA,QAAQ,CAACG,MAAT,KAAoBb,aAAa,CAACc,GAAlC,KACKS,MAAM,CAACY,yBAAP,GAAmC,CAACZ,MAAM,CAACY,yBAAP,IAAoC,CAArC,IAA0C,CADlF;AAGMC,YAAAA,SA3Dd,GA2D0BJ,MA3D1B;AA4DQI,YAAAA,SAAS,CAACF,YAAV,GAAyBA,YAAzB;AA5DR,kBA6DcE,SA7Dd;;AAAA;AAAA,6CAgEWjC,WAAW,CAAYkB,WAAZ,EAAyBW,MAAzB,CAhEtB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmEA,SAAS5B,aAAT","sourcesContent":["import {\n    WP_REST_API_USE_GLOBAL_METHOD,\n    RouteRequestInterface,\n    RouteParamsInterface,\n    RouteResponseInterface,\n    RequestArgs,\n    commonUrlBuilder,\n    RouteHttpVerb\n} from \"./\";\nimport deepMerge from \"deepmerge\";\nimport Url from \"url-parse\";\nimport \"whatwg-fetch\"; // window.fetch polyfill\nimport { parseResult } from \".\";\n\n/**\n * Build and execute a specific REST query.\n *\n * @see urlBuilder\n * @returns Result of REST API\n * @throws\n */\nasync function commonRequest<\n    TRequest extends RouteRequestInterface,\n    TParams extends RouteParamsInterface,\n    TResponse extends RouteResponseInterface\n>({\n    location,\n    options,\n    request: routeRequest,\n    params,\n    settings = {}\n}: {\n    request?: TRequest;\n    params?: TParams;\n    settings?: Partial<{ -readonly [P in keyof Request]: Request[P] }>;\n} & RequestArgs): Promise<TResponse> {\n    const url = commonUrlBuilder({ location, params, nonce: false, options });\n\n    // Use global parameter (see https://developer.wordpress.org/rest-api/using-the-rest-api/global-parameters/)\n    if (WP_REST_API_USE_GLOBAL_METHOD && location.method && location.method !== RouteHttpVerb.GET) {\n        settings.method = RouteHttpVerb.POST;\n    } else {\n        settings.method = RouteHttpVerb.GET;\n    }\n\n    // Request with GET/HEAD method cannot have body\n    const apiUrl = new Url(url, true);\n    const allowBody = [\"HEAD\", \"GET\"].indexOf(settings.method) === -1;\n    if (!allowBody && routeRequest) {\n        apiUrl.set(\"query\", deepMerge(apiUrl.query, routeRequest));\n    }\n\n    const apiUrlBuilt = apiUrl.toString();\n    const result = await window.fetch(\n        apiUrlBuilt,\n        deepMerge.all([\n            settings,\n            {\n                headers: {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                    \"X-WP-Nonce\": options.restNonce\n                },\n                body: allowBody ? JSON.stringify(routeRequest) : undefined\n            }\n        ])\n    );\n\n    // `window.fetch` does not throw an error if the server response an error code.\n    if (!result.ok) {\n        let responseJSON = undefined;\n        try {\n            responseJSON = await parseResult<TResponse>(apiUrlBuilt, result);\n        } catch (e) {\n            // Silence is golden.\n        }\n\n        // Set this request as failing so the endpoint is probably corrupt (see `corrupRestApi.tsx`)\n        settings.method === RouteHttpVerb.GET &&\n            (window.detectCorrupRestApiFailed = (window.detectCorrupRestApiFailed || 0) + 1);\n\n        const resultAny = result as any;\n        resultAny.responseJSON = responseJSON;\n        throw resultAny;\n    }\n\n    return parseResult<TResponse>(apiUrlBuilt, result);\n}\n\nexport { commonRequest };\n"]}]}