{"remainingRequest":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/thread-loader/dist/cjs.js!/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/babel-loader/lib/index.js??ref--4-2!/Users/nguyenthanhdoan/www/wp/wpplugins/packages/utils/lib/factory/ajax/commonUrlBuilder.tsx","dependencies":[{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/packages/utils/lib/factory/ajax/commonUrlBuilder.tsx","mtime":1657739433190},{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/cache-loader/dist/cjs.js","mtime":1657732874511},{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/thread-loader/dist/cjs.js","mtime":1657732875400},{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/babel-loader/lib/index.js","mtime":1657732874459}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFVybCBmcm9tICJ1cmwtcGFyc2UiOwppbXBvcnQgeyB0cmFpbGluZ3NsYXNoaXQsIHVudHJhaWxpbmdzbGFzaGl0IH0gZnJvbSAiLi4vLi4vaGVscGVycyI7CmltcG9ydCB7IFJvdXRlSHR0cFZlcmIgfSBmcm9tICIuIjsKaW1wb3J0IGRlZXBNZXJnZSBmcm9tICJkZWVwbWVyZ2UiOyAvLyBVc2UgX21ldGhvZCBpbnN0ZWFkIG9mIEh0dHAgdmVyYgoKdmFyIFdQX1JFU1RfQVBJX1VTRV9HTE9CQUxfTUVUSE9EID0gdHJ1ZTsKCi8qKgogKiBCdWlsZCBhbiBVUkwgZm9yIGEgc3BlY2lmaWMgc2NoZW1lLgogKgogKiBAcGFyYW0gcGFyYW0wCiAqLwpmdW5jdGlvbiBjb21tb25VcmxCdWlsZGVyKF9yZWYpIHsKICB2YXIgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLAogICAgICBfcmVmJHBhcmFtcyA9IF9yZWYucGFyYW1zLAogICAgICBwYXJhbXMgPSBfcmVmJHBhcmFtcyA9PT0gdm9pZCAwID8ge30gOiBfcmVmJHBhcmFtcywKICAgICAgX3JlZiRub25jZSA9IF9yZWYubm9uY2UsCiAgICAgIG5vbmNlID0gX3JlZiRub25jZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkbm9uY2UsCiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7CiAgdmFyIGFwaVVybCA9IG5ldyBVcmwob3B0aW9ucy5yZXN0Um9vdCwgdHJ1ZSk7CiAgdmFyIHF1ZXJ5ID0gYXBpVXJsLnF1ZXJ5OwogIHZhciBwZXJtYWxpbmtQYXRoID0gcXVlcnkucmVzdF9yb3V0ZSB8fCBhcGlVcmwucGF0aG5hbWU7IC8vIERldGVybWluZSBwYXRoIGZyb20gcGVybWFsaW5rIHNldHRpbmdzCiAgLy8gRmluZCBkeW5hbWljIHBhcmFtZXRlcnMgZnJvbSBVUkwgYmluZGluZ3MgKGxpa2UgL3VzZXIvOmlkKQoKICB2YXIgZm91bmRQYXJhbXMgPSBbXTsKICB2YXIgcGF0aCA9IGxvY2F0aW9uLnBhdGgucmVwbGFjZSgvOihbQS1aYS16MC05LV9dKykvZywgZnVuY3Rpb24gKG1hdGNoLCBncm91cCkgewogICAgZm91bmRQYXJhbXMucHVzaChncm91cCk7CiAgICByZXR1cm4gcGFyYW1zW2dyb3VwXTsKICB9KTsKICB2YXIgZ2V0UGFyYW1zID0ge307IC8vIEZpbmQgdW5kZWNsYXJlZCBib2R5IHBhcmFtcyAod2hpY2ggYXJlIG5vdCBiaW5kIGFib3ZlKSBhbmQgYWRkIGl0IHRvIEdFVCBxdWVyeQoKICBmb3IgKHZhciBfaSA9IDAsIF9PYmplY3Qka2V5cyA9IE9iamVjdC5rZXlzKHBhcmFtcyk7IF9pIDwgX09iamVjdCRrZXlzLmxlbmd0aDsgX2krKykgewogICAgdmFyIGNoZWNrUGFyYW0gPSBfT2JqZWN0JGtleXNbX2ldOwoKICAgIGlmIChmb3VuZFBhcmFtcy5pbmRleE9mKGNoZWNrUGFyYW0pID09PSAtMSkgewogICAgICBnZXRQYXJhbXNbY2hlY2tQYXJhbV0gPSBwYXJhbXNbY2hlY2tQYXJhbV07IC8vIFdlIGRvIG5vdCBuZWVkIGBlbmNvZGVVUklDb21wb25lbnRgIGFzIGl0IGlzIHN1cHBvcnRlZCBieSBgdXJsLXBhcnNlYCBhbHJlYWR5CiAgICB9CiAgfQoKICB2YXIgdXNlUGF0aCA9IHRyYWlsaW5nc2xhc2hpdChwZXJtYWxpbmtQYXRoKSArIHVudHJhaWxpbmdzbGFzaGl0KGxvY2F0aW9uLm5hbWVzcGFjZSB8fCBvcHRpb25zLnJlc3ROYW1lc3BhY2UpICsgcGF0aDsgLy8gRm9yY2UgcHJvdG9jb2wgZnJvbSBwYXJlbnQgbG9jYXRpb24KCiAgdmFyIHVzZVRoaXNQcm90b2NvbCA9IG5ldyBVcmwod2luZG93LmxvY2F0aW9uLmhyZWYpLnByb3RvY29sLnNsaWNlKDAsIC0xKTsKICBhcGlVcmwuc2V0KCJwcm90b2NvbCIsIHVzZVRoaXNQcm90b2NvbCk7IC8vIFNldCBwYXRoIGRlcGVuZGluZyBvbiBwZXJtYWxpbmsgc2V0dGluZ3MKCiAgaWYgKHF1ZXJ5LnJlc3Rfcm91dGUpIHsKICAgIHF1ZXJ5LnJlc3Rfcm91dGUgPSB1c2VQYXRoOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbgogIH0gZWxzZSB7CiAgICBhcGlVcmwuc2V0KCJwYXRobmFtZSIsIHVzZVBhdGgpOyAvLyBTZXQgcGF0aAogIH0gLy8gQXBwZW5kIG90aGVycwoKCiAgaWYgKG5vbmNlICYmIG9wdGlvbnMucmVzdE5vbmNlKSB7CiAgICBxdWVyeS5fd3Bub25jZSA9IG9wdGlvbnMucmVzdE5vbmNlOwogIH0KCiAgaWYgKFdQX1JFU1RfQVBJX1VTRV9HTE9CQUxfTUVUSE9EICYmIGxvY2F0aW9uLm1ldGhvZCAmJiBsb2NhdGlvbi5tZXRob2QgIT09IFJvdXRlSHR0cFZlcmIuR0VUKSB7CiAgICBxdWVyeS5fbWV0aG9kID0gbG9jYXRpb24ubWV0aG9kOwogIH0KCiAgcmV0dXJuIGFwaVVybC5zZXQoInF1ZXJ5IiwgZGVlcE1lcmdlLmFsbChbb3B0aW9ucy5yZXN0UXVlcnksIGdldFBhcmFtcywgcXVlcnldKSkudG9TdHJpbmcoKTsKfQoKZXhwb3J0IHsgV1BfUkVTVF9BUElfVVNFX0dMT0JBTF9NRVRIT0QsIGNvbW1vblVybEJ1aWxkZXIsIFVybCB9Ow=="},{"version":3,"sources":["/Users/nguyenthanhdoan/www/wp/wpplugins/packages/utils/lib/factory/ajax/commonUrlBuilder.tsx"],"names":["Url","trailingslashit","untrailingslashit","RouteHttpVerb","deepMerge","WP_REST_API_USE_GLOBAL_METHOD","commonUrlBuilder","location","params","nonce","options","apiUrl","restRoot","query","permalinkPath","rest_route","pathname","foundParams","path","replace","match","group","push","getParams","Object","keys","checkParam","indexOf","usePath","namespace","restNamespace","useThisProtocol","window","href","protocol","slice","set","restNonce","_wpnonce","method","GET","_method","all","restQuery","toString"],"mappings":"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","sourcesContent":["import Url from \"url-parse\";\nimport { trailingslashit, untrailingslashit } from \"../../helpers\";\nimport { BaseOptions } from \"../../options\";\nimport { RouteHttpVerb } from \".\";\nimport deepMerge from \"deepmerge\";\n\n// Use _method instead of Http verb\nconst WP_REST_API_USE_GLOBAL_METHOD = true;\n\ninterface RouteLocationInterface {\n    path: string;\n    namespace?: string;\n    method?: RouteHttpVerb;\n}\n\ntype RouteRequestInterface = {}; // POST-Query in JSON-format\ntype RouteParamsInterface = {}; // Parameters in IRouteLocationInterface#path which gets resolved like \"example/:id\", items not found in the URL are appended as GET\ntype RouteResponseInterface = {}; // Result in JSON-format\n\ninterface RequestArgs {\n    location: RouteLocationInterface;\n    params?: RouteParamsInterface;\n    options: {\n        restRoot: BaseOptions[\"restRoot\"];\n        restNamespace: BaseOptions[\"restNamespace\"];\n        restNonce?: BaseOptions[\"restNonce\"];\n        restQuery?: BaseOptions[\"restQuery\"];\n    };\n}\n\n/**\n * Build an URL for a specific scheme.\n *\n * @param param0\n */\nfunction commonUrlBuilder({\n    location,\n    params = {},\n    nonce = true,\n    options\n}: {\n    nonce?: boolean;\n} & RequestArgs) {\n    const apiUrl = new Url(options.restRoot, true);\n    const { query } = apiUrl;\n    const permalinkPath = (query.rest_route as string) || apiUrl.pathname; // Determine path from permalink settings\n\n    // Find dynamic parameters from URL bindings (like /user/:id)\n    const foundParams: string[] = [];\n    const path = location.path.replace(/:([A-Za-z0-9-_]+)/g, (match: string, group: string) => {\n        foundParams.push(group);\n        return (params as any)[group];\n    });\n    const getParams: any = {};\n\n    // Find undeclared body params (which are not bind above) and add it to GET query\n    for (const checkParam of Object.keys(params)) {\n        if (foundParams.indexOf(checkParam) === -1) {\n            getParams[checkParam] = (params as any)[checkParam]; // We do not need `encodeURIComponent` as it is supported by `url-parse` already\n        }\n    }\n\n    const usePath =\n        trailingslashit(permalinkPath) + untrailingslashit(location.namespace || options.restNamespace) + path;\n\n    // Force protocol from parent location\n    const useThisProtocol = new Url(window.location.href).protocol.slice(0, -1);\n    apiUrl.set(\"protocol\", useThisProtocol);\n\n    // Set path depending on permalink settings\n    if (query.rest_route) {\n        query.rest_route = usePath; // eslint-disable-line @typescript-eslint/naming-convention\n    } else {\n        apiUrl.set(\"pathname\", usePath); // Set path\n    }\n\n    // Append others\n    if (nonce && options.restNonce) {\n        query._wpnonce = options.restNonce;\n    }\n    if (WP_REST_API_USE_GLOBAL_METHOD && location.method && location.method !== RouteHttpVerb.GET) {\n        query._method = location.method;\n    }\n\n    return apiUrl.set(\"query\", deepMerge.all([options.restQuery, getParams, query])).toString();\n}\n\nexport {\n    WP_REST_API_USE_GLOBAL_METHOD,\n    RouteLocationInterface,\n    RouteRequestInterface,\n    RouteParamsInterface,\n    RouteResponseInterface,\n    RequestArgs,\n    commonUrlBuilder,\n    Url\n};\n"]}]}