{"remainingRequest":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/thread-loader/dist/cjs.js!/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/babel-loader/lib/index.js??ref--4-2!/Users/nguyenthanhdoan/www/wp/wpplugins/packages/utils/lib/factory/ajax/parseResult.tsx","dependencies":[{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/packages/utils/lib/factory/ajax/parseResult.tsx","mtime":1657739433192},{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/cache-loader/dist/cjs.js","mtime":1657732874511},{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/thread-loader/dist/cjs.js","mtime":1657732875400},{"path":"/Users/nguyenthanhdoan/www/wp/wpplugins/node_modules/babel-loader/lib/index.js","mtime":1657732874459}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yIjsKCmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdDsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJ1bmRlZmluZWQiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09ICJudW1iZXIiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBvW1N5bWJvbC5pdGVyYXRvcl0oKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH0KCmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0KCi8qKgogKiBHZXQgdGhlIHJlc3VsdCBvZiB0aGUgYFJlc3BvbnNlYC4gSXQgYWxzbyBoYW5kbGVzIG11bHRpbGluZSByZXNwb25zZXMsIGUuIGcuCiAqIGEgUEhQIGBOb3RpY2U6YCBtZXNzYWdlIGlzIG91dHB1dCB0aHJvdWdoIGEgY29uZmxpY3RpbmcgcGx1Z2luOgogKi8KZnVuY3Rpb24gcGFyc2VSZXN1bHQoX3gsIF94MikgewogIHJldHVybiBfcGFyc2VSZXN1bHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX3BhcnNlUmVzdWx0KCkgewogIF9wYXJzZVJlc3VsdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUodXJsLCByZXN1bHQpIHsKICAgIHZhciBjbG9uZUZvckZhbGxiYWNrLCBib2R5LCBsYXN0RXJyb3IsIF9pdGVyYXRvciwgX3N0ZXAsIGxpbmU7CgogICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY2xvbmVGb3JGYWxsYmFjayA9IHJlc3VsdC5jbG9uZSgpOwogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQuanNvbigpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQuc2VudCk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzsKICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICByZXR1cm4gY2xvbmVGb3JGYWxsYmFjay50ZXh0KCk7CgogICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgYm9keSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIGNvbnNvbGUud2FybigiVGhlIHJlc3BvbnNlIG9mICIuY29uY2F0KHVybCwgIiBjb250YWlucyB1bmV4cGVjdGVkIEpTT04sIHRyeSB0byByZXNvbHZlIHRoZSBKU09OIGxpbmUgYnkgbGluZS4uLiIpLCB7CiAgICAgICAgICAgICAgYm9keTogYm9keQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYm9keS5zcGxpdCgiXG4iKSk7CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNDsKCiAgICAgICAgICAgIF9pdGVyYXRvci5zKCk7CgogICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgaWYgKChfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmUpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjg7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxpbmUgPSBfc3RlcC52YWx1ZTsKCiAgICAgICAgICAgIGlmICghKGxpbmUuc3RhcnRzV2l0aCgiWyIpIHx8IGxpbmUuc3RhcnRzV2l0aCgieyIpKSkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE5OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBKU09OLnBhcnNlKGxpbmUpKTsKCiAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjM7CiAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHRbImNhdGNoIl0oMTkpOwogICAgICAgICAgICBsYXN0RXJyb3IgPSBfY29udGV4dC50MTsKCiAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMjg6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMzsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAzMDoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDMwOwogICAgICAgICAgICBfY29udGV4dC50MiA9IF9jb250ZXh0WyJjYXRjaCJdKDE0KTsKCiAgICAgICAgICAgIF9pdGVyYXRvci5lKF9jb250ZXh0LnQyKTsKCiAgICAgICAgICBjYXNlIDMzOgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzM7CgogICAgICAgICAgICBfaXRlcmF0b3IuZigpOwoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgzMyk7CgogICAgICAgICAgY2FzZSAzNjoKICAgICAgICAgICAgdGhyb3cgbGFzdEVycm9yOwoKICAgICAgICAgIGNhc2UgMzc6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSwgbnVsbCwgW1sxLCA3XSwgWzE0LCAzMCwgMzMsIDM2XSwgWzE5LCAyM11dKTsKICB9KSk7CiAgcmV0dXJuIF9wYXJzZVJlc3VsdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnQgeyBwYXJzZVJlc3VsdCB9Ow=="},{"version":3,"sources":["/Users/nguyenthanhdoan/www/wp/wpplugins/packages/utils/lib/factory/ajax/parseResult.tsx"],"names":["parseResult","url","result","cloneForFallback","clone","json","text","body","console","warn","split","line","startsWith","JSON","parse","lastError"],"mappings":";;;;;;;;;AAEA;;;;SAIeA,W;;;;;0EAAf,iBAAqEC,GAArE,EAAkFC,MAAlF;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,gBADV,GAC6BD,MAAM,CAACE,KAAP,EAD7B;AAAA;AAAA;AAAA,mBAGsBF,MAAM,CAACG,IAAP,EAHtB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAM2BF,gBAAgB,CAACG,IAAjB,EAN3B;;AAAA;AAMcC,YAAAA,IANd;AAOQC,YAAAA,OAAO,CAACC,IAAR,2BAAgCR,GAAhC,yEAAyG;AACrGM,cAAAA,IAAI,EAAJA;AADqG,aAAzG;AAPR,mDAW2BA,IAAI,CAACG,KAAL,CAAW,IAAX,CAX3B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWmBC,YAAAA,IAXnB;;AAAA,kBAYgBA,IAAI,CAACC,UAAL,CAAgB,GAAhB,KAAwBD,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAZxC;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAc2BC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAd3B;;AAAA;AAAA;AAAA;AAgBoBI,YAAAA,SAAS,cAAT;;AAhBpB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,kBAoBcA,SApBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwBA,SAASf,WAAT","sourcesContent":["import { RouteResponseInterface } from \".\";\n\n/**\n * Get the result of the `Response`. It also handles multiline responses, e. g.\n * a PHP `Notice:` message is output through a conflicting plugin:\n */\nasync function parseResult<TResponse extends RouteResponseInterface>(url: string, result: Response) {\n    const cloneForFallback = result.clone();\n    try {\n        return (await result.json()) as TResponse;\n    } catch (e) {\n        // Something went wrong, try each line as result of a JSON string\n        const body = await cloneForFallback.text();\n        console.warn(`The response of ${url} contains unexpected JSON, try to resolve the JSON line by line...`, {\n            body\n        });\n        let lastError: any;\n        for (const line of body.split(\"\\n\")) {\n            if (line.startsWith(\"[\") || line.startsWith(\"{\")) {\n                try {\n                    return JSON.parse(line) as TResponse;\n                } catch (e) {\n                    lastError = e;\n                }\n            }\n        }\n        throw lastError;\n    }\n}\n\nexport { parseResult };\n"]}]}